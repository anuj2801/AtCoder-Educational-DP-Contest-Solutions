// Libraries
#include <bits/stdc++.h>
#include <unistd.h>
using namespace std;

// Optimization
#pragma GCC optimize("O3")
#pragma GCC target("sse4")

// Macros
#define pb push_back
#define eb emplace_back
#define lb lower_bound
#define ub upper_bound
#define fi first
#define se second
#define sz(x) (int)x.size()
#define all(v) v.begin(), v.end()
#define case_g(x) cout << "Case #" << x << ": "
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define mp(a, b) make_pair(a, b)
#define max3(a, b, c) max((a), max((b), (c)))
#define min3(a, b, c) min((a), min((b), (c)))
#define mx_all(c) *max_element((c).begin(), (c).end())
#define mn_all(c) *min_element((c).begin(), (c).end())
#define nl "\n"
#define pi 3.141592653589793238
#define fast ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);

// Aliases
using ll = long long;
using ld = long double;
using ull = unsigned long long;
using vi = std::vector<int>;
using vll = std::vector<ll>;
using vb = std::vector<bool>;
using pii = std::pair<int, int>;
using pll = std::pair<ll, ll>;
using vpii = std::vector<pii>;
using vpll = std::vector<pll>;
using vvi = std::vector<vi>;
using vvll = std::vector<vll>;
using vvb = std::vector<vb>;

// constants
const ll INF = 1e18 + 10;
const ll MOD = 1e9 + 7;

bool cmp(ll a, ll b) // TC = O(1) //To compare two numbers(long long type)
{
    return a > b;
}

ll gcd(ll a, ll b) // TC = O(log n) //To calculate gcd of two numbers
{
    if (b == 0)
    {
        return a;
    }
    else
    {
        return gcd(b, a % b);
    }
}

ll lcm(ll a, ll b) // TC = O(1) //To calculate lcm of two numbers
{
    return (a / gcd(a, b)) * b;
}

ll power(ll a, ll b) // TC=O(log(b)) // To calculate power of a number using binary exponentiation
{
    ll ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a);
        }
        a = (a * a);
        b >>= 1;
    }
    return ans;
}

vector<ll> factors(ll n) // all factors of a number
{
    vector<ll> v;

    for (ll i = 1; i <= sqrt(n); i++)
    {
        if (n % i == 0)
        {
            if (n / i == i)
            {
                v.pb(i);
            }

            else
            {
                v.pb(i);
                v.pb(n / i);
            }
        }
    }

    sort(v.begin(), v.end());
    return v;
}

bool isPrime(ll n) // TC = O( sqrt(n) )
{
    if (n <= 1)
    {
        return false;
    }

    if (n <= 3)
    {
        return true;
    }

    if (n % 2 == 0 || n % 3 == 0)
    {
        return false;
    }

    for (ll i = 5; i * i <= n; i = i + 6)
    {
        if (n % i == 0 || n % (i + 2) == 0)
        {
            return false;
        }
    }

    return true;
}

set<ll> sieve(ll n) // all prime numbers till n   TC = O(n)
{
    set<ll> s;

    bool prime[n + 1];
    memset(prime, true, sizeof(prime));

    for (ll p = 2; p * p <= n; p++)
    {
        if (prime[p] == true)
        {
            for (ll i = p * p; i <= n; i += p)
            {
                prime[i] = false;
            }
        }
    }

    for (ll p = 2; p <= n; p++)
    {
        if (prime[p])
        {
            s.insert(p);
        }
    }

    return s;
}

set<ll> prime(ll n) // all prime factors of a number  TC = O(sqrt(n))
{
    set<ll> s;
    while (n % 2 == 0)
    {
        s.insert(2);
        n = n / 2;
    }
    for (ll i = 3; i <= sqrt(n); i = i + 2)
    {
        while (n % i == 0)
        {
            s.insert(i);
            n = n / i;
        }
    }

    if (n > 2)
    {
        s.insert(n);
    }
    return s;
}

ll mod_power(ll x, ll y, ll mod)
{
    ll ans = 1;

    x = x % mod;

    if (x == 0)
    {
        return 0;
    }

    while (y > 0)
    {

        if (y & 1)
        {
            ans = (ans * x) % mod;
        }

        y = y >> 1;
        x = (x * x) % mod;
    }

    return ans;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
    if (a == 0)
    {
        *x = 0, *y = 1;
        return b;
    }

    ll x1, y1;
    ll gcd = gcdExtended(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}

ll modInverse(ll b, ll m)
{
    ll x, y;
    ll g = gcdExtended(b, m, &x, &y);

    if (g != 1)
    {
        return -1;
    }

    return (x % m + m) % m;
}

ll mod_divide(ll a, ll b, ll m)
{
    a = a % m;
    ll inv = modInverse(b, m);
    return (inv * a) % m;
}

bool is_palindrome(string s)
{
    return equal(s.begin(), s.end(), s.rbegin());
}

ll distancesum(vector<ll> &arr, ll n) // for each pole, finding the distance.
{
    ll res = 0, sum = 0;
    for (ll i = 0; i < n; i++)
    {
        res += (arr[i] * i - sum);
        sum += arr[i];
    }

    return res;
}

void precompute()
{
}

void solve()
{
}

int main()
{
    fast int t;
    cin >> t;
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    // precompute();
    while (t--)
    {
        solve();
    }
    return 0;
}